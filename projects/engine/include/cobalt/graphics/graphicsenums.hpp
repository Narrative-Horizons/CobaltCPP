#pragma once

#include <cstdint>

#include <cobalt/macros.hpp>

namespace cobalt
{
	enum class TextureFormat : uint16_t
	{
		UNKNOWN = 0,
		RGBA32_TYPELESS,
		RGBA32_FLOAT,
		RGBA32_UINT,
		RGBA32_SINT,
		RGB32_TYPELESS,
		RGB32_FLOAT,
		RGB32_UINT,
		RGB32_SINT,
		RGBA16_TYPELESS,
		RGBA16_FLOAT,
		RGBA16_UNORM,
		RGBA16_UINT,
		RGBA16_SNORM,
		RGBA16_SINT,
		RG32_TYPELESS,
		RG32_FLOAT,
		RG32_UINT,
		RG32_SINT,
		R32G8X24_TYPELESS,
		D32_FLOAT_S8X24_UINT,
		R32_FLOAT_X8X24_TYPELESS,
		X32_TYPELESS_G8X24_UINT,
		RGB10A2_TYPELESS,
		RGB10A2_UNORM,
		RGB10A2_UINT,
		R11G11B10_FLOAT,
		RGBA8_TYPELESS,
		RGBA8_UNORM,
		RGBA8_UNORM_SRGB,
		RGBA8_UINT,
		RGBA8_SNORM,
		RGBA8_SINT,
		RG16_TYPELESS,
		RG16_FLOAT,
		RG16_UNORM,
		RG16_UINT,
		RG16_SNORM,
		RG16_SINT,
		R32_TYPELESS,
		D32_FLOAT,
		R32_FLOAT,
		R32_UINT,
		R32_SINT,
		R24G8_TYPELESS,
		D24_UNORM_S8_UINT,
		R24_UNORM_X8_TYPELESS,
		X24_TYPELESS_G8_UINT,
		RG8_TYPELESS,
		RG8_UNORM,
		RG8_UINT,
		RG8_SNORM,
		RG8_SINT,
		R16_TYPELESS,
		R16_FLOAT,
		D16_UNORM,
		R16_UNORM,
		R16_UINT,
		R16_SNORM,
		R16_SINT,
		R8_TYPELESS,
		R8_UNORM,
		R8_UINT,
		R8_SNORM,
		R8_SINT,
		A8_UNORM,
		R1_UNORM,
		RGB9E5_SHAREDEXP,
		RG8_B8G8_UNORM,
		G8R8_G8B8_UNORM,
		BC1_TYPELESS,
		BC1_UNORM,
		BC1_UNORM_SRGB,
		BC2_TYPELESS,
		BC2_UNORM,
		BC2_UNORM_SRGB,
		BC3_TYPELESS,
		BC3_UNORM,
		BC3_UNORM_SRGB,
		BC4_TYPELESS,
		BC4_UNORM,
		BC4_SNORM,
		BC5_TYPELESS,
		BC5_UNORM,
		BC5_SNORM,
		B5G6R5_UNORM,
		B5G5R5A1_UNORM,
		BGRA8_UNORM,
		BGRX8_UNORM,
		R10G10B10_XR_BIAS_A2_UNORM,
		BGRA8_TYPELESS,
		BGRA8_UNORM_SRGB,
		BGRX8_TYPELESS,
		BGRX8_UNORM_SRGB,
		BC6H_TYPELESS,
		BC6H_UF16,
		BC6H_SF16,
		BC7_TYPELESS,
		BC7_UNORM,
		BC7_UNORM_SRGB,
		NUM_FORMATS
	};

	enum class PrimitiveTopology : uint8_t
	{
		TOPOLOGY_UNDEFINED = 0,
		TOPOLOGY_TRIANGLE_LIST,
		TOPOLOGY_TRIANGLE_STRIP,
		TOPOLOGY_POINT_LIST,
		TOPOLOGY_LINE_LIST,
		TOPOLOGY_LINE_STRIP,
		TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_32_CONTROL_POINT_PATCHLIST,
		TOPOLOGY_NUM_TOPOLOGIES
	};

	enum class FillMode : int8_t
	{
		UNDEFINED = 0,
		WIREFRAME,
		SOLID,
		NUM_MODES
	};

	enum class CullMode : int8_t
	{
		UNDEFINED = 0,
		NONE,
		FRONT,
		BACK,
		NUM_MODES
	};

	enum class ShaderType : uint32_t
	{
		UNKNOWN = 0x0000,
		VERTEX = 0x0001,
		PIXEL = 0x0002,
		GEOMETRY = 0x0004,
		HULL = 0x0008,
		TYPE_DOMAIN = 0x0010,
		COMPUTE = 0x0020,
		AMPLIFICATION = 0x0040,
		MESH = 0x0080,
		RAY_GEN = 0x0100,
		RAY_MISS = 0x0200,
		RAY_CLOSEST_HIT = 0x0400,
		RAY_ANY_HIT = 0x0800,
		RAY_INTERSECTION = 0x1000,
		CALLABLE = 0x2000,
		TILE = 0x4000,
		LAST = TILE,
		ALL_GRAPHICS = VERTEX |
		PIXEL |
		GEOMETRY |
		HULL |
		TYPE_DOMAIN,
		ALL_MESH = AMPLIFICATION |
		MESH |
		PIXEL,
		ALL_RAY_TRACING = RAY_GEN |
		RAY_MISS |
		RAY_CLOSEST_HIT |
		RAY_ANY_HIT |
		RAY_INTERSECTION |
		CALLABLE
	};
	COBALT_DEFINE_FLAG_ENUM_OPERATORS(ShaderType);

	enum class ShaderResourceType : uint8_t
	{
		STATIC = 0,
		MUTABLE,
		DYNAMIC,
		NUM_TYPES
	};

	enum class ShaderResourceTypeFlags : uint32_t
	{
		NONE = 0x00,
		STATIC = (0x01 << static_cast<uint32_t>(ShaderResourceType::STATIC)),
		MUTABLE = (0x01 << static_cast<uint32_t>(ShaderResourceType::MUTABLE)),
		DYNAMIC = (0x01 << static_cast<uint32_t>(ShaderResourceType::DYNAMIC)),
		MUT_DYN =
		MUTABLE |
		DYNAMIC,
		ALL =
		STATIC |
		MUTABLE |
		DYNAMIC
	};
	COBALT_DEFINE_FLAG_ENUM_OPERATORS(ShaderResourceTypeFlags);

	enum class BindShaderResourcesFlags : uint32_t
	{
		BIND_SHADER_RESOURCES_UPDATE_STATIC = static_cast<uint32_t>(ShaderResourceTypeFlags::STATIC),
		BIND_SHADER_RESOURCES_UPDATE_MUTABLE = static_cast<uint32_t>(ShaderResourceTypeFlags::MUTABLE),
		BIND_SHADER_RESOURCES_UPDATE_DYNAMIC = static_cast<uint32_t>(ShaderResourceTypeFlags::DYNAMIC),
		BIND_SHADER_RESOURCES_UPDATE_ALL = static_cast<uint32_t>(ShaderResourceTypeFlags::ALL),
		BIND_SHADER_RESOURCES_KEEP_EXISTING = 0x08,
		BIND_SHADER_RESOURCES_VERIFY_ALL_RESOLVED = 0x10
	};
	COBALT_DEFINE_FLAG_ENUM_OPERATORS(BindShaderResourcesFlags);

	enum class ShaderVariableFlags : uint8_t
	{
		NONE = 0x00,
		NO_DYNAMIC_BUFFERS = 0x01,
		LAST = NO_DYNAMIC_BUFFERS
	};
	COBALT_DEFINE_FLAG_ENUM_OPERATORS(ShaderVariableFlags);

	enum class FilterType : uint8_t
	{
		UNKNOWN = 0,
		POINT,
		LINEAR,
		ANISOTROPIC,
		COMPARISON_POINT,
		COMPARISON_LINEAR,
		COMPARISON_ANISOTROPIC,
		MINIMUM_POINT,
		MINIMUM_LINEAR,
		MINIMUM_ANISOTROPIC,
		MAXIMUM_POINT,
		MAXIMUM_LINEAR,
		MAXIMUM_ANISOTROPIC,
		NUM_FILTERS
	};

	enum class TextureAddressMode : uint8_t
	{
		UNKNOWN = 0,
		WRAP = 1,
		MIRROR = 2,
		CLAMP = 3,
		BORDER = 4,
		MIRROR_ONCE = 5,
		NUM_MODES
	};

	enum class ComparisonFunction : uint8_t
	{
		UNKNOWN = 0,
		NEVER,
		LESS,
		EQUAL,
		LESS_EQUAL,
		GREATER,
		NOT_EQUAL,
		GREATER_EQUAL,
		ALWAYS,
		NUM_FUNCTIONS
	};

	enum class ResourceStateTransitionMode : uint8_t
	{
		NONE = 0,
		TRANSITION,
		VERIFY
	};

	enum class SetVertexBufferFlags : uint8_t
	{
		NONE = 0,
		RESET = 0x01
	};
	COBALT_DEFINE_FLAG_ENUM_OPERATORS(SetVertexBufferFlags)

		enum class ClearDepthStencilFlags : uint32_t
	{
		NONE = 0x00,
		DEPTH = 0x01,
		STENCIL = 0x02
	};
	COBALT_DEFINE_FLAG_ENUM_OPERATORS(ClearDepthStencilFlags)

		enum class ValueType : uint8_t
	{
		UNDEFINED = 0,
		INT8,
		INT16,
		INT32,
		UINT8,
		UINT16,
		UINT32,
		FLOAT16,
		FLOAT32,
		NUM_TYPES
	};

	enum class DrawFlags : uint8_t
	{
		NONE = 0x00,
		VERIFY_STATES = 0x01,
		VERIFY_DRAW_ATTRIBS = 0x02,
		VERIFY_RENDER_TARGETS = 0x04,
		VERIFY_ALL = VERIFY_STATES | VERIFY_DRAW_ATTRIBS | VERIFY_RENDER_TARGETS,
		DYNAMIC_RESOURCE_BUFFERS_INTACT = 0x08
	};

	enum class ImageFileFormat : uint8_t
	{
		UNKNOWN = 0,
		JPEG,
		PNG,
		TIFF,
		DDS,
		KTX
	};

	enum class Usage : uint8_t
	{
		IMMUTABLE = 0,
		DEFAULT,
		DYNAMIC,
		STAGING,
		UNIFIED,
		NUM_USAGES
	};

	enum class BindFlags : uint32_t
	{
		NONE = 0x0,
		VERTEX_BUFFER = 0x1,
		INDEX_BUFFER = 0x2,
		UNIFORM_BUFFER = 0x4,
		SHADER_RESOURCE = 0x8,
		STREAM_OUTPUT = 0x10,
		RENDER_TARGET = 0x20,
		DEPTH_STENCIL = 0x40,
		UNORDERED_ACCESS = 0x80,
		INDIRECT_DRAW_ARGS = 0x100,
		INPUT_ATTACHMENT = 0x200,
		RAY_TRACING = 0x400,
		FLAGS_LAST = 0x400
	};

	enum class CPUAccessFlags : uint8_t
	{
		NONE = 0x00,
		READ = 0x01,
		WRITE = 0x02
	};

	enum class TextureTypeView : uint8_t
	{
		UNDEFINED = 0,
		SHADER_RESOURCE,
		RENDER_TARGET,
		DEPTH_STENCIL,
		UNORDERED_ACCESS,
		NUM_VIEWS
	};
}